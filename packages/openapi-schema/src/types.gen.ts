// This file is auto-generated by @hey-api/openapi-ts

/**
 * MCP Server type
 */
export type McpServerType = 'sse' | 'streamable' | 'stdio';

export type McpServerDTO = {
  /**
   * MCP server name
   */
  name: string;
  type: McpServerType;
  /**
   * MCP server URL (for sse and streamable types)
   */
  url?: string;
  /**
   * Command to execute (for stdio type)
   */
  command?: string;
  /**
   * Command arguments (for stdio type)
   */
  args?: Array<string>;
  /**
   * Environment variables (for stdio type)
   */
  env?: {
    [key: string]: string;
  };
  /**
   * HTTP headers (for sse and streamable types)
   */
  headers?: {
    [key: string]: string;
  };
  /**
   * Reconnection configuration
   */
  reconnect?: {
    /**
     * Whether reconnection is enabled
     */
    enabled?: boolean;
    /**
     * Maximum number of reconnection attempts
     */
    maxAttempts?: number;
    /**
     * Delay between reconnection attempts in milliseconds
     */
    delayMs?: number;
  };
  /**
   * Additional configuration
   */
  config?: {
    [key: string]: unknown;
  };
  /**
   * Whether the MCP server is enabled
   */
  enabled: boolean;
  /**
   * Whether the MCP server is global
   */
  isGlobal: boolean;
  /**
   * MCP server creation time
   */
  createdAt: string;
  /**
   * MCP server update time
   */
  updatedAt: string;
};

export type ListMcpServersData = {
  query?: {
    type?: McpServerType;
    /**
     * Filter by enabled status
     */
    enabled?: boolean;
  };
};

export type ListMcpServersResponse = BaseResponse & {
  data?: Array<McpServerDTO>;
};

export type UpsertMcpServerRequest = {
  /**
   * MCP server name
   */
  name: string;
  type: McpServerType;
  /**
   * MCP server URL (required for sse and streamable types)
   */
  url?: string;
  /**
   * Command to execute (required for stdio type)
   */
  command?: string;
  /**
   * Command arguments (required for stdio type)
   */
  args?: Array<string>;
  /**
   * Environment variables (for stdio type)
   */
  env?: {
    [key: string]: string;
  };
  /**
   * HTTP headers (for sse and streamable types)
   */
  headers?: {
    [key: string]: string;
  };
  /**
   * Reconnection configuration
   */
  reconnect?: {
    /**
     * Whether reconnection is enabled
     */
    enabled?: boolean;
    /**
     * Maximum number of reconnection attempts
     */
    maxAttempts?: number;
    /**
     * Delay between reconnection attempts in milliseconds
     */
    delayMs?: number;
  };
  /**
   * Additional configuration
   */
  config?: {
    [key: string]: unknown;
  };
  /**
   * Whether the MCP server is enabled
   */
  enabled?: boolean;
};

export type UpsertMcpServerResponse = BaseResponse & {
  data?: McpServerDTO;
};

export type DeleteMcpServerRequest = {
  /**
   * MCP name to delete
   */
  name: string;
};

export type McpServerTool = {
  /**
   * Tool name
   */
  name: string;
  /**
   * Tool description
   */
  description: string;
};

export type ValidateMcpServerResponse = BaseResponse & {
  data?: Array<McpServerTool>;
};

export type DeleteMcpServerResponse = BaseResponse & {
  data?: null;
};

export type Page = {
  /**
   * Page ID
   */
  pageId: string;
  /**
   * Page title
   */
  title: string;
  /**
   * Page description
   */
  description?: string;
  /**
   * Page status
   */
  status?: 'draft' | 'published';
  /**
   * Canvas ID associated with this page
   */
  canvasId?: string;
  /**
   * Page cover URL
   */
  coverUrl?: string;
  /**
   * Page creation time
   */
  createdAt: string;
  /**
   * Page last update time
   */
  updatedAt: string;
};

/**
 * Page status
 */
export type status = 'draft' | 'published';

export type PageNodeRelation = {
  /**
   * Relation ID
   */
  relationId: string;
  /**
   * Page ID
   */
  pageId?: string;
  /**
   * Node ID
   */
  nodeId: string;
  /**
   * Node type
   */
  nodeType: string;
  /**
   * Entity ID
   */
  entityId: string;
  /**
   * Order index
   */
  orderIndex: number;
  /**
   * Node data
   */
  nodeData?: CanvasNodeData;
};

export type PageDetail = Page & {
  /**
   * List of node relations
   */
  nodeRelations?: Array<PageNodeRelation>;
  /**
   * Page configuration
   */
  pageConfig?: {
    [key: string]: unknown;
  };
};

export type UpdatePageRequest = {
  /**
   * Page title
   */
  title?: string;
  /**
   * Page description
   */
  description?: string;
  /**
   * List of node relations with updated order
   */
  nodeRelations?: Array<{
    /**
     * Node ID
     */
    nodeId?: string;
    /**
     * New order index
     */
    orderIndex?: number;
  }>;
};

export type UpdatePageResponse = BaseResponse & {
  data?: Page & {
    /**
     * List of node relations
     */
    nodeRelations?: Array<PageNodeRelation>;
  };
};

export type DeletePageResponse = BaseResponse & {
  data?: {
    /**
     * ID of the deleted page
     */
    pageId?: string;
    /**
     * Canvas ID associated with the deleted page
     */
    canvasId?: string;
  };
};

export type SharePageResponse = BaseResponse & {
  data?: {
    /**
     * Page ID
     */
    pageId?: string;
    /**
     * Canvas ID associated with the page
     */
    canvasId?: string;
    /**
     * Share ID
     */
    shareId?: string;
    /**
     * Share URL
     */
    shareUrl?: string;
  };
};

export type DeletePageNodeResponse = BaseResponse & {
  data?: {
    /**
     * Page ID
     */
    pageId?: string;
    /**
     * Canvas ID associated with the page
     */
    canvasId?: string;
    /**
     * ID of the deleted node
     */
    nodeId?: string;
  };
};

export type ListPagesResponse = BaseResponse & {
  data?: {
    /**
     * Total number of pages
     */
    total?: number;
    /**
     * List of pages
     */
    pages?: Array<Page>;
  };
};

export type PageDetailResponse = BaseResponse & {
  data?: PageDetail;
};

export type AddPageNodesRequest = {
  /**
   * List of node IDs to add to the page
   */
  nodeIds: Array<string>;
};

export type AddPageNodesResponse = BaseResponse & {
  data?: {
    page?: Page;
    /**
     * List of node relations
     */
    nodeRelations?: Array<PageNodeRelation>;
  };
};

export type CanvasPageResponse = BaseResponse & {
  data?: {
    page?: Page;
    /**
     * List of node relations
     */
    nodeRelations?: Array<PageNodeRelation>;
  };
};

/**
 * Refly user, used as JWT payload
 */
export type User = {
  /**
   * UID
   */
  uid: string;
  /**
   * Email
   */
  email?: string;
};

/**
 * Refly user in shared entity
 */
export type ShareUser = {
  /**
   * UID
   */
  uid: string;
  /**
   * User name
   */
  name?: string;
  /**
   * User nickname
   */
  nickname?: string;
  /**
   * User avatar
   */
  avatar?: string;
};

/**
 * List order
 */
export type ListOrder = 'creationAsc' | 'creationDesc';

/**
 * Reference metadata
 */
export type ReferenceMeta = {
  /**
   * Reference title
   */
  title?: string;
  /**
   * Reference URL
   */
  url?: string;
};

/**
 * Basic reference info
 */
export type BaseReference = {
  /**
   * Source entity type
   */
  sourceType: ReferenceType;
  /**
   * Source entity ID
   */
  sourceId: string;
  /**
   * Target entity type
   */
  targetType: ReferenceType;
  /**
   * Target entity ID
   */
  targetId: string;
};

/**
 * Canvas status
 */
export type CanvasStatus = 'ready' | 'duplicating' | 'duplicate_failed';

export type Canvas = {
  /**
   * Canvas ID
   */
  canvasId: string;
  /**
   * Canvas title
   */
  title: string;
  /**
   * Whether this canvas is read-only
   */
  readOnly?: boolean;
  /**
   * Canvas status
   */
  status?: CanvasStatus;
  /**
   * Minimap URL
   */
  minimapUrl?: string;
  /**
   * Minimap storage key
   */
  minimapStorageKey?: string;
  /**
   * Canvas creation time
   */
  createdAt: string;
  /**
   * Canvas update time
   */
  updatedAt: string;
};

export type CanvasTemplateCategory = {
  /**
   * Category ID
   */
  categoryId: string;
  /**
   * Category name
   */
  name: string;
  /**
   * Category label dictionary
   */
  labelDict: {
    [key: string]: string;
  };
  /**
   * Category description dictionary
   */
  descriptionDict: {
    [key: string]: string;
  };
};

export type CanvasTemplate = {
  /**
   * Canvas template ID
   */
  templateId: string;
  /**
   * Share ID
   */
  shareId: string;
  /**
   * Share user
   */
  shareUser?: ShareUser;
  /**
   * Canvas template version
   */
  version?: number;
  /**
   * Canvas template category
   */
  category?: CanvasTemplateCategory;
  /**
   * Canvas template title
   */
  title: string;
  /**
   * Canvas template description
   */
  description: string;
  /**
   * Canvas template language code
   */
  language: string;
  /**
   * Whether this canvas template is featured
   */
  featured?: boolean;
  /**
   * Canvas template creation time
   */
  createdAt: string;
  /**
   * Canvas template update time
   */
  updatedAt: string;
};

export type Reference = BaseReference & {
  /**
   * Reference ID
   */
  referenceId: string;
  /**
   * Source entity metadata
   */
  sourceMeta?: ReferenceMeta;
  /**
   * Target entity metadata
   */
  targetMeta?: ReferenceMeta;
};

/**
 * Resource metadata
 */
export type ResourceMeta = {
  /**
   * Weblink URL
   */
  url?: string;
  /**
   * Weblink title
   */
  title?: string;
  /**
   * File content type (MIME type)
   */
  contentType?: string;
};

/**
 * Resource type
 */
export type ResourceType = 'weblink' | 'text' | 'file';

/**
 * Error message for resource indexing
 */
export type IndexError = {
  /**
   * Error type
   */
  type?: 'pageLimitExceeded' | 'unknownError';
  /**
   * Error metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Error type
 */
export type type = 'pageLimitExceeded' | 'unknownError';

export type Resource = {
  /**
   * Resource ID (empty if it's external)
   */
  resourceId: string;
  /**
   * Resource type
   */
  resourceType: ResourceType;
  /**
   * Resource title
   */
  title: string;
  /**
   * Resource metadata
   */
  data?: ResourceMeta;
  /**
   * Resource index status
   */
  indexStatus?: IndexStatus;
  /**
   * Error message for resource indexing
   */
  indexError?: IndexError;
  /**
   * Resource storage size (in bytes)
   */
  storageSize?: string;
  /**
   * Resource vector storage size (in bytes)
   */
  vectorSize?: string;
  /**
   * Raw file storage key (used to download the file)
   * @deprecated
   */
  rawFileKey?: string;
  /**
   * Resource creation time
   */
  createdAt?: string;
  /**
   * Resource update time
   */
  updatedAt?: string;
  /**
   * Preview content for this resource
   */
  contentPreview?: string;
  /**
   * Document content for this resource (only returned in getResourceDetail API)
   */
  content?: string;
  /**
   * Download URL for this resource (for file type only)
   */
  downloadURL?: string;
};

/**
 * Reference type
 */
export type ReferenceType = 'document' | 'resource';

export type Document = {
  /**
   * Document ID
   */
  docId: string;
  /**
   * Document title
   */
  title: string;
  /**
   * Document content preview
   */
  contentPreview?: string;
  /**
   * Full document content (only returned in detail api)
   */
  content?: string;
  /**
   * Whether this document is read-only
   */
  readOnly?: boolean;
  /**
   * Document creation time
   */
  createdAt?: string;
  /**
   * Document update time
   */
  updatedAt?: string;
};

/**
 * Entity type
 */
export type EntityType =
  | 'document'
  | 'resource'
  | 'canvas'
  | 'share'
  | 'user'
  | 'project'
  | 'skillResponse'
  | 'codeArtifact'
  | 'page';

/**
 * Entity
 */
export type Entity = {
  /**
   * Entity ID
   */
  entityId?: string;
  /**
   * Entity type
   */
  entityType?: EntityType;
};

/**
 * Project source
 */
export type ProjectSource = {
  /**
   * Entity ID
   */
  entityId?: string;
  /**
   * Entity type
   */
  entityType?: EntityType;
  /**
   * Project title
   */
  title?: string;
  /**
   * Project creation time
   */
  createdAt?: string;
  /**
   * Project update time
   */
  updatedAt?: string;
};

/**
 * Project
 */
export type Project = {
  /**
   * Project ID
   */
  projectId: string;
  /**
   * Project name
   */
  name: string;
  /**
   * Project description
   */
  description?: string;
  /**
   * Project cover URL
   */
  coverUrl?: string;
  /**
   * Custom instructions for the project
   */
  customInstructions?: string;
  /**
   * Project creation time
   */
  createdAt?: string;
  /**
   * Project update time
   */
  updatedAt?: string;
};

/**
 * Label class
 */
export type LabelClass = {
  /**
   * Label class ID
   */
  labelClassId: string;
  /**
   * Label class name
   */
  name: string;
  /**
   * Label class display name
   */
  displayName: string;
  /**
   * Label icon
   */
  icon?: Icon;
  /**
   * Label creation instruction prompt
   */
  prompt?: string;
  /**
   * Label class creation time
   */
  createdAt: string;
  /**
   * Label class update time
   */
  updatedAt: string;
};

/**
 * Label instances related to entities
 */
export type LabelInstance = {
  /**
   * Label instance ID
   */
  labelId: string;
  /**
   * Label class ID
   */
  labelClassId: string;
  /**
   * Label class
   */
  labelClass?: LabelClass;
  /**
   * Label value
   */
  value: string;
};

/**
 * Data input mode
 */
export type InputMode =
  | 'input'
  | 'inputNumber'
  | 'inputTextArea'
  | 'select'
  | 'multiSelect'
  | 'radio'
  | 'switch';

/**
 * Config scope
 */
export type ConfigScope = Array<'runtime' | 'template'>;

/**
 * Select option
 */
export type SelectOption = {
  /**
   * Option value
   */
  value: string;
  /**
   * Option label (key is locale, value is label)
   */
  labelDict?: {
    [key: string]: string;
  };
  /**
   * Whether this option is disabled
   */
  disabled?: boolean;
};

/**
 * Dynamic config item
 */
export type DynamicConfigItem = {
  /**
   * Config key
   */
  key: string;
  /**
   * Config input mode
   */
  inputMode: InputMode;
  /**
   * Specifies whether this config is required and in which contexts
   */
  required?: {
    /**
     * Whether this config is required
     */
    value?: boolean;
    /**
     * The contexts in which the requirement applies
     */
    configScope?: ConfigScope;
  };
  /**
   * Config label (key is locale, value is label)
   */
  labelDict: {
    [key: string]: string;
  };
  /**
   * Config description (key is locale, value is description)
   */
  descriptionDict: {
    [key: string]: string;
  };
  /**
   * Default value
   */
  defaultValue?: number | string | boolean | Array<string>;
  /**
   * Config options
   */
  options?: Array<SelectOption>;
  /**
   * Additional input properties
   */
  inputProps?: {
    /**
     * Minimum value for number input
     */
    min?: number;
    /**
     * Maximum value for number input
     */
    max?: number;
    /**
     * Step value for number input
     */
    step?: number;
    /**
     * Decimal precision for number input
     */
    precision?: number;
    /**
     * Whether to display as password input
     */
    passwordType?: boolean;
  };
};

/**
 * Dynamic config value
 */
export type DynamicConfigValue = {
  /**
   * Config key label
   */
  label: string;
  /**
   * Config value
   */
  value:
    | string
    | number
    | boolean
    | Array<string>
    | {
        [key: string]: unknown;
      };
  /**
   * Config display value
   */
  displayValue: string;
  /**
   * The contexts in which the requirement applies
   */
  configScope?: ConfigScope;
};

/**
 * Skill template config schema
 */
export type SkillTemplateConfigDefinition = {
  /**
   * Config items
   */
  items: Array<DynamicConfigItem>;
};

/**
 * Icon type
 */
export type IconType = 'emoji' | 'image';

/**
 * Icon
 */
export type Icon = {
  /**
   * Icon type
   */
  type: IconType;
  /**
   * Icon value
   */
  value: string;
};

/**
 * Skill
 */
export type Skill = {
  /**
   * Skill name
   */
  name: string;
  /**
   * Skill description
   */
  description?: string;
  /**
   * Skill icon
   */
  icon?: Icon;
  /**
   * Skill config schema
   */
  configSchema?: SkillTemplateConfigDefinition;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
};

/**
 * Skill trigger type
 */
export type SkillTriggerType = 'timer' | 'simpleEvent';

/**
 * Simple event name
 */
export type SimpleEventName = 'onResourceReady';

export type SimpleEvent = {
  /**
   * Simple event name
   */
  name: SimpleEventName;
  /**
   * Simple event display name (key is locale, value is display name)
   */
  displayName: {
    [key: string]: unknown;
  };
  /**
   * Context keys to provide
   */
  provideContextKeys: Array<SkillContextKey>;
};

/**
 * Timer interval
 */
export type TimerInterval = 'hour' | 'day' | 'week' | 'month' | 'year';

export type TimerTriggerConfig = {
  /**
   * Time to run
   */
  datetime: string;
  /**
   * Repeat interval
   */
  repeatInterval?: TimerInterval;
};

/**
 * Skill triggers
 */
export type SkillTrigger = {
  /**
   * Skill ID
   */
  skillId: string;
  /**
   * Trigger display name
   */
  displayName: string;
  /**
   * Trigger ID
   */
  triggerId: string;
  /**
   * Trigger type
   */
  triggerType: SkillTriggerType;
  /**
   * Simple event name (only required when trigger type is `simpleEvent`)
   */
  simpleEventName?: SimpleEventName;
  /**
   * Timer config (only required when trigger type is `timer`)
   */
  timerConfig?: TimerTriggerConfig;
  /**
   * Skill input
   */
  input?: SkillInput;
  /**
   * Skill context
   */
  context?: SkillContext;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
  /**
   * Trigger enabled
   */
  enabled: boolean;
  /**
   * Trigger creation time
   */
  createdAt: string;
  /**
   * Trigger update time
   */
  updatedAt: string;
};

/**
 * Skill metadata
 */
export type SkillMeta = {
  /**
   * Skill name
   */
  name: string;
  /**
   * Skill icon
   */
  icon?: Icon;
};

/**
 * Action metadata
 */
export type ActionMeta = {
  /**
   * Action type
   */
  type?: ActionType;
  /**
   * Action name
   */
  name?: string;
  /**
   * Action icon
   */
  icon?: Icon;
};

/**
 * Skill runtime config
 */
export type SkillRuntimeConfig = {
  /**
   * Whether to disable link parsing for input query
   */
  disableLinkParsing?: boolean;
  /**
   * Whether to enable knowledge base for input query
   */
  enabledKnowledgeBase?: boolean;
};

/**
 * Skill template config (key is config item key, value is config value)
 */
export type SkillTemplateConfig = {
  [key: string]: DynamicConfigValue;
};

/**
 * Action config (key is config item key, value is config value)
 */
export type ActionConfig = {
  [key: string]: DynamicConfigValue;
};

/**
 * Skill
 */
export type SkillInstance = SkillMeta & {
  /**
   * Skill instance description
   */
  description?: string;
  /**
   * Skill instance prompt hint
   */
  promptHint?: string;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
  /**
   * Skill template config schema
   */
  tplConfigSchema?: SkillTemplateConfigDefinition;
  /**
   * Skill invocation config
   */
  invocationConfig: SkillInvocationConfig;
  /**
   * Skill pinned time
   */
  pinnedAt?: string;
  /**
   * Skill creation time
   */
  createdAt: string;
  /**
   * Skill update time
   */
  updatedAt: string;
};

/**
 * Source metadata
 */
export type SourceMeta = {
  /**
   * Source URL
   * @deprecated
   */
  source?: string;
  /**
   * Source title
   * @deprecated
   */
  title?: string;
  /**
   * Source publish timesss
   */
  publishedTime?: string;
  /**
   * Related entity ID
   */
  entityId?: string;
  /**
   * Related entity type
   */
  entityType?: string;
  /**
   * Original locale
   */
  originalLocale?: string;
  /**
   * Translated display locale
   */
  translatedDisplayLocale?: string;
  /**
   * Whether the source is translated
   */
  isTranslated?: boolean;
  /**
   * Original query
   */
  originalQuery?: string;
  /**
   * Translated query
   */
  translatedQuery?: string;
  /**
   * Source type
   */
  sourceType?: 'webSearch' | 'library';
};

/**
 * Source type
 */
export type sourceType = 'webSearch' | 'library';

/**
 * Source selection
 */
export type SourceSelection = {
  /**
   * Selected xPath
   * @deprecated
   */
  xPath?: string;
  /**
   * Selected content
   */
  content: string;
  /**
   * Selection type
   */
  type: 'text' | 'table' | 'link' | 'image' | 'video' | 'audio';
};

/**
 * Selection type
 */
export type type2 = 'text' | 'table' | 'link' | 'image' | 'video' | 'audio';

/**
 * Source of the message
 */
export type Source = {
  /**
   * Source URL
   */
  url?: string;
  /**
   * Source title
   */
  title?: string;
  /**
   * Source content
   */
  pageContent: string;
  /**
   * Relativity score
   */
  score?: number;
  /**
   * Source metadata
   */
  metadata?: SourceMeta;
  /**
   * Source selections
   */
  selections?: Array<SourceSelection>;
};

/**
 * Search step
 */
export type SearchStep = {
  /**
   * Search step name
   */
  step?: string;
  /**
   * Step duration in milliseconds
   */
  duration?: number;
  /**
   * Step-specific result data
   */
  result?: {
    [key: string]: unknown;
  };
};

/**
 * Model tier
 */
export type ModelTier = 't1' | 't2' | 'free';

/**
 * Token usage item
 */
export type TokenUsageItem = {
  /**
   * Model name
   */
  modelName: string;
  /**
   * Model provider
   */
  modelProvider: string;
  /**
   * Input tokens
   */
  inputTokens: number;
  /**
   * Output tokens
   */
  outputTokens: number;
  /**
   * Model tier
   */
  tier?: string;
};

/**
 * Action status
 */
export type ActionStatus = 'waiting' | 'executing' | 'finish' | 'failed';

/**
 * Artifact type
 */
export type ArtifactType = 'document' | 'codeArtifact';

/**
 * Artifact status
 */
export type ArtifactStatus = 'waiting' | 'generating' | 'finish' | 'failed';

/**
 * Artifact
 */
export type Artifact = {
  /**
   * Artifact type
   */
  type: ArtifactType;
  /**
   * Entity ID
   */
  entityId: string;
  /**
   * Artifact title
   */
  title: string;
  /**
   * Artifact status
   */
  status?: ArtifactStatus;
  /**
   * Artifact content
   */
  content?: string;
  /**
   * Artifact metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * Artifact creation time
   */
  createdAt?: string;
  /**
   * Artifact update time
   */
  updatedAt?: string;
};

/**
 * Action step metadata
 */
export type ActionStepMeta = {
  /**
   * Step name
   */
  name: string;
};

/**
 * Action log
 */
export type ActionLog = {
  /**
   * Log key
   */
  key: string;
  /**
   * Log title arguments
   */
  titleArgs?: {
    [key: string]: unknown;
  };
  /**
   * Log description arguments
   */
  descriptionArgs?: {
    [key: string]: unknown;
  };
};

/**
 * Action step
 */
export type ActionStep = {
  /**
   * Step name
   */
  name: string;
  /**
   * Step content
   */
  content?: string;
  /**
   * Step reasoning content
   */
  reasoningContent?: string;
  /**
   * Step artifacts
   */
  artifacts?: Array<Artifact>;
  /**
   * Step structured data output
   */
  structuredData?: {
    [key: string]: unknown;
  };
  /**
   * Action step logs
   */
  logs?: Array<ActionLog>;
  /**
   * Token usage
   */
  tokenUsage?: Array<TokenUsageItem>;
};

/**
 * Code artifact type
 */
export type CodeArtifactType =
  | 'application/refly.artifacts.react'
  | 'image/svg+xml'
  | 'application/refly.artifacts.mermaid'
  | 'text/markdown'
  | 'application/refly.artifacts.code'
  | 'text/html'
  | 'application/refly.artifacts.mindmap';

/**
 * Code artifact
 */
export type CodeArtifact = {
  /**
   * Artifact type
   */
  type: CodeArtifactType;
  /**
   * Artifact ID
   */
  artifactId: string;
  /**
   * Artifact title
   */
  title: string;
  /**
   * Code artifact content
   */
  content?: string;
  /**
   * Code artifact language
   */
  language?: string;
  createdAt?: string;
  updatedAt?: string;
};

/**
 * Action result
 */
export type ActionResult = {
  /**
   * Action result ID
   */
  readonly resultId: string;
  /**
   * Action result version
   */
  version?: number;
  /**
   * Action result title
   */
  title?: string;
  /**
   * Action input
   */
  input?: SkillInput;
  /**
   * Model tier
   */
  tier?: ModelTier;
  /**
   * Step status
   */
  status?: ActionStatus;
  /**
   * Action type
   */
  type?: ActionType;
  /**
   * Selected model
   */
  modelInfo?: ModelInfo;
  /**
   * Action target type
   */
  targetType?: EntityType;
  /**
   * Action target ID
   */
  targetId?: string;
  /**
   * Action metadata
   */
  actionMeta?: ActionMeta;
  /**
   * Action context
   */
  context?: SkillContext;
  /**
   * Action template config
   */
  tplConfig?: SkillTemplateConfig;
  /**
   * Action runtime config
   */
  runtimeConfig?: SkillRuntimeConfig;
  /**
   * Action result history
   */
  history?: Array<ActionResult>;
  /**
   * Action steps
   */
  steps?: Array<ActionStep>;
  /**
   * Errors
   */
  errors?: Array<string>;
  /**
   * Message creation time
   */
  createdAt?: string;
  /**
   * Message update time
   */
  updatedAt?: string;
};

/**
 * Resource index status
 */
export type IndexStatus =
  | 'init'
  | 'wait_parse'
  | 'wait_index'
  | 'finish'
  | 'parse_failed'
  | 'index_failed';

/**
 * Payment recurring interval
 */
export type SubscriptionInterval = 'monthly' | 'yearly';

/**
 * Subscription plan type
 */
export type SubscriptionPlanType = 'free' | 'plus' | 'pro' | 'max' | 'ultra';

/**
 * Subscription status
 */
export type SubscriptionStatus =
  | 'active'
  | 'canceled'
  | 'incomplete'
  | 'incomplete_expired'
  | 'past_due'
  | 'paused'
  | 'trialing'
  | 'unpaid';

export type Subscription = {
  /**
   * Subscription ID
   */
  subscriptionId: string;
  /**
   * Subscription plan type
   */
  planType: SubscriptionPlanType;
  /**
   * Payment recurring interval
   */
  interval?: SubscriptionInterval;
  /**
   * Subscription status
   */
  status: SubscriptionStatus;
  /**
   * Whether the subscription is a trial
   */
  isTrial?: boolean;
  /**
   * Subscription cancel time
   */
  cancelAt?: string;
};

export type TokenUsageMeter = {
  /**
   * Token usage meter ID
   */
  meterId: string;
  /**
   * User ID
   */
  uid: string;
  /**
   * Subscription ID
   */
  subscriptionId?: string;
  /**
   * Token usage meter start time
   */
  startAt: string;
  /**
   * Token usage meter end time
   */
  endAt?: string;
  /**
   * Request count quota (T1)
   */
  t1CountQuota?: number;
  /**
   * Request count used (T1)
   */
  t1CountUsed?: number;
  /**
   * Token quota (T1)
   * @deprecated
   */
  t1TokenQuota: number;
  /**
   * Token used (T1)
   * @deprecated
   */
  t1TokenUsed: number;
  /**
   * Request count quota (T2)
   */
  t2CountQuota?: number;
  /**
   * Request count used (T2)
   */
  t2CountUsed?: number;
  /**
   * Token quota (T2)
   * @deprecated
   */
  t2TokenQuota: number;
  /**
   * Token used (T2)
   * @deprecated
   */
  t2TokenUsed: number;
};

export type StorageUsageMeter = {
  /**
   * Storage usage meter ID
   */
  meterId: string;
  /**
   * User ID
   */
  uid: string;
  /**
   * Subscription ID
   */
  subscriptionId?: string;
  /**
   * File count used
   */
  fileCountUsed?: number;
  /**
   * File count quota
   */
  fileCountQuota?: number;
  /**
   * Object storage quota (in bytes), including resource, canvas and static files
   * @deprecated
   */
  objectStorageQuota: string;
  /**
   * Resource storage size in use (in bytes)
   * @deprecated
   */
  resourceSize: string;
  /**
   * Canvas storage size in use (in bytes)
   * @deprecated
   */
  canvasSize: string;
  /**
   * Static file storage size in use (in bytes)
   * @deprecated
   */
  fileSize: string;
  /**
   * Vector storage quota (in bytes)
   * @deprecated
   */
  vectorStorageQuota: string;
  /**
   * Vector storage size used (in bytes)
   * @deprecated
   */
  vectorStorageUsed: string;
};

export type FileParsingMeter = {
  /**
   * File pages parsed
   */
  pagesParsed: number;
  /**
   * File pages limit
   */
  pagesLimit: number;
  /**
   * File upload limit (in MB)
   */
  fileUploadLimit?: number;
};

/**
 * Operation mode
 */
export type OperationMode = 'mouse' | 'touchpad';

/**
 * Provider config
 */
export type ProviderConfig = {
  /**
   * Provider ID
   */
  providerId?: string;
  /**
   * Provider key
   */
  providerKey?: string;
};

/**
 * Model usage scene
 */
export type ModelScene = 'chat' | 'queryAnalysis' | 'titleGeneration';

/**
 * Default model config
 */
export type DefaultModelConfig = {
  /**
   * Default chat model to use
   */
  chat?: ProviderItem;
  /**
   * Query analysis and context processing model
   */
  queryAnalysis?: ProviderItem;
  /**
   * Title generation model for canvas and documents
   */
  titleGeneration?: ProviderItem;
};

/**
 * User preferences
 */
export type UserPreferences = {
  /**
   * Operation mode
   */
  operationMode?: OperationMode;
  /**
   * Whether to disable hover tutorial
   */
  disableHoverCard?: boolean;
  /**
   * Web search config
   */
  webSearch?: ProviderConfig;
  /**
   * URL parsing config
   */
  urlParsing?: ProviderConfig;
  /**
   * PDF parsing config
   */
  pdfParsing?: ProviderConfig;
  /**
   * Default model config
   */
  defaultModel?: DefaultModelConfig;
};

/**
 * Onboarding status
 */
export type OnboardingStatus = 'not_started' | 'skipped' | 'completed';

export type OnboardingConfig = {
  /**
   * Settings onboarding status
   */
  settings?: OnboardingStatus;
  /**
   * Tour onboarding status
   */
  tour?: OnboardingStatus;
};

export type UserSettings = {
  /**
   * User ID
   */
  uid: string;
  /**
   * User avatar
   */
  avatar: string;
  /**
   * Username (can only contains letters, numbers, and underscores)
   */
  name: string;
  /**
   * User nickname
   */
  nickname?: string;
  /**
   * User email
   */
  email: string;
  /**
   * Whether email is verified
   */
  emailVerified?: boolean;
  /**
   * User UI locale
   */
  uiLocale?: string;
  /**
   * User output locale
   */
  outputLocale?: string;
  /**
   * Stripe customer ID
   */
  customerId?: string;
  /**
   * User subscription
   */
  subscription?: Subscription;
  /**
   * Whether the user has beta access
   */
  hasBetaAccess?: boolean;
  /**
   * User preferences
   */
  preferences?: UserPreferences;
  /**
   * Onboarding config
   */
  onboarding?: OnboardingConfig;
};

/**
 * Auth provider
 */
export type AuthProvider = 'email' | 'google' | 'github';

export type AuthConfigItem = {
  /**
   * Auth provider
   */
  provider: AuthProvider;
};

export type AuthConfigResponse = BaseResponse & {
  /**
   * Auth providers
   */
  data?: Array<AuthConfigItem>;
};

/**
 * Email signup request
 */
export type EmailSignupRequest = {
  /**
   * Email
   */
  email: string;
  /**
   * Password
   */
  password: string;
};

export type EmailSignupData = {
  /**
   * Verification session ID
   */
  sessionId?: string;
  /**
   * Whether email verification is skipped
   */
  skipVerification?: boolean;
};

export type EmailSignupResponse = BaseResponse & {
  data?: EmailSignupData;
};

/**
 * Verification purpose
 */
export type VerificationPurpose = 'signup' | 'resetPassword';

/**
 * Create verification session request
 */
export type CreateVerificationRequest = {
  /**
   * Email
   */
  email: string;
  /**
   * Verification purpose
   */
  purpose: VerificationPurpose;
  /**
   * Password
   */
  password?: string;
};

export type CreateVerificationData = {
  /**
   * Verification session ID
   */
  sessionId?: string;
};

export type CreateVerificationResponse = BaseResponse & {
  data?: CreateVerificationData;
};

/**
 * Resend verification request
 */
export type ResendVerificationRequest = {
  /**
   * Verification session ID
   */
  sessionId: string;
};

/**
 * Check verification code request
 */
export type CheckVerificationRequest = {
  /**
   * Verification session ID
   */
  sessionId: string;
  /**
   * Verification code
   */
  code: string;
};

/**
 * Email login request
 */
export type EmailLoginRequest = {
  /**
   * Email
   */
  email: string;
  /**
   * Password
   */
  password: string;
};

export type EmailLoginData = {
  /**
   * Access token
   */
  accessToken?: string;
};

export type EmailLoginResponse = BaseResponse & {
  data?: EmailLoginData;
};

export type GetUserSettingsResponse = BaseResponse & {
  data?: UserSettings;
};

export type CollabTokenData = {
  /**
   * Collab token
   */
  token: string;
  /**
   * Token expiration time (in unix milliseconds)
   */
  expiresAt?: number;
};

export type GetCollabTokenResponse = BaseResponse & {
  data?: CollabTokenData;
};

export type BaseResponse = {
  /**
   * Whether the operation was successful
   */
  success: boolean;
  /**
   * Error code
   */
  errCode?: string;
  /**
   * Error message
   */
  errMsg?: string;
  /**
   * Trace ID
   */
  traceId?: string;
  /**
   * Error stack (only returned in development environment)
   */
  stack?: string;
};

export type ListCanvasResponse = BaseResponse & {
  /**
   * Canvas list
   */
  data?: Array<Canvas>;
};

export type GetCanvasDetailResponse = BaseResponse & {
  data?: Canvas;
};

/**
 * Raw canvas data
 */
export type RawCanvasData = {
  /**
   * Canvas owner
   */
  owner?: ShareUser;
  /**
   * Canvas title
   */
  title?: string;
  /**
   * Minimap URL
   */
  minimapUrl?: string;
  /**
   * Canvas nodes
   */
  nodes?: Array<CanvasNode>;
  /**
   * Canvas edges
   */
  edges?: Array<{
    [key: string]: unknown;
  }>;
};

export type ExportCanvasResponse = BaseResponse & {
  /**
   * Canvas data
   */
  data?: RawCanvasData;
};

export type DuplicateCanvasRequest = {
  /**
   * Canvas ID to duplicate
   */
  canvasId: string;
  /**
   * Custom canvas title
   */
  title?: string;
  /**
   * Project ID to bind with
   */
  projectId?: string;
  /**
   * Whether to duplicate entities within the canvas
   */
  duplicateEntities?: boolean;
};

export type DuplicateDocumentRequest = {
  /**
   * Document ID to duplicate
   */
  docId: string;
  /**
   * Custom document title for the duplicate
   */
  title?: string;
};

export type DuplicateResourceRequest = {
  /**
   * Resource ID to duplicate
   */
  resourceId: string;
  /**
   * Custom resource title for the duplicate
   */
  title?: string;
};

export type UpsertCanvasRequest = {
  /**
   * Canvas title
   */
  title?: string;
  /**
   * Canvas ID (only used for update)
   */
  canvasId?: string;
  /**
   * Project ID to bind with
   */
  projectId?: string;
  /**
   * Minimap storage key
   */
  minimapStorageKey?: string;
};

export type UpsertCanvasResponse = BaseResponse & {
  data?: Canvas;
};

export type DeleteCanvasRequest = {
  /**
   * Canvas ID to delete
   */
  canvasId: string;
  /**
   * Whether to delete all files in the canvas
   */
  deleteAllFiles?: boolean;
};

export type AutoNameCanvasRequest = {
  /**
   * Canvas ID
   */
  canvasId: string;
  /**
   * Whether to directly update the canvas title
   */
  directUpdate?: boolean;
};

export type AutoNameCanvasResponse = BaseResponse & {
  /**
   * Auto name canvas result
   */
  data?: {
    /**
     * New canvas title
     */
    title?: string;
  };
};

export type ListCanvasTemplateResponse = BaseResponse & {
  /**
   * Canvas template list
   */
  data?: Array<CanvasTemplate>;
};

export type CreateCanvasTemplateRequest = {
  /**
   * Canvas ID
   */
  canvasId: string;
  /**
   * Canvas template title
   */
  title: string;
  /**
   * Canvas template description
   */
  description: string;
  /**
   * Canvas template category ID
   */
  categoryId?: string;
  /**
   * Canvas template language code
   */
  language: string;
  /**
   * Cover storage key
   */
  coverStorageKey?: string;
};

export type UpdateCanvasTemplateRequest = {
  /**
   * Canvas template ID
   */
  templateId: string;
  /**
   * Canvas template title
   */
  title?: string;
  /**
   * Canvas template description
   */
  description?: string;
  /**
   * Canvas template category ID
   */
  categoryId?: string;
  /**
   * Canvas template language code
   */
  language?: string;
};

export type UpsertCanvasTemplateResponse = BaseResponse & {
  /**
   * Canvas template
   */
  data?: CanvasTemplate;
};

export type ListCanvasTemplateCategoryResponse = BaseResponse & {
  /**
   * Canvas template category list
   */
  data?: Array<CanvasTemplateCategory>;
};

export type UpsertResourceRequest = {
  /**
   * Resource title
   */
  title: string;
  /**
   * Resource type
   */
  resourceType: ResourceType;
  /**
   * Resource ID (only used for update)
   */
  resourceId?: string;
  /**
   * Project ID to bind with
   */
  projectId?: string;
  /**
   * Resource metadata
   */
  data?: ResourceMeta;
  /**
   * Storage key
   */
  storageKey?: string;
  /**
   * Resource content (this will be ignored if storageKey was set)
   */
  content?: string;
};

export type UpsertResourceResponse = BaseResponse & {
  data?: Resource;
};

export type BatchCreateResourceResponse = BaseResponse & {
  /**
   * Resource list
   */
  data?: Array<Resource>;
};

export type ReindexResourceRequest = {
  /**
   * Resource ID list
   */
  resourceIds: Array<string>;
};

export type ReindexResourceResponse = BaseResponse & {
  /**
   * Resource list
   */
  data?: Array<Resource>;
};

export type DeleteResourceRequest = {
  /**
   * Resource ID to delete
   */
  resourceId: string;
};

export type ListResourceResponse = BaseResponse & {
  /**
   * Resource list
   */
  data?: Array<Resource>;
};

export type GetResourceDetailResponse = BaseResponse & {
  /**
   * Resource data
   */
  data?: Resource;
};

export type ListDocumentResponse = BaseResponse & {
  /**
   * Canvas list
   */
  data?: Array<Document>;
};

export type GetDocumentDetailResponse = BaseResponse & {
  /**
   * Document data
   */
  data?: Document;
};

export type UpsertDocumentRequest = {
  /**
   * Canvas title
   */
  title?: string;
  /**
   * Document ID (only used for update)
   */
  docId?: string;
  /**
   * Project ID to bind with
   */
  projectId?: string;
  /**
   * Whether this document is read-only
   */
  readOnly?: boolean;
  /**
   * Document initial content
   */
  initialContent?: string;
};

export type UpsertDocumentResponse = BaseResponse & {
  data?: Document;
};

export type DeleteDocumentRequest = {
  /**
   * Document ID to delete
   */
  docId: string;
};

export type GetActionResultResponse = BaseResponse & {
  data?: ActionResult;
};

export type QueryReferencesRequest = {
  /**
   * Source entity type
   */
  sourceType?: EntityType;
  /**
   * Source entity ID
   */
  sourceId?: string;
  /**
   * Target entity type
   */
  targetType?: EntityType;
  /**
   * Target entity ID
   */
  targetId?: string;
};

export type QueryReferencesResponse = BaseResponse & {
  /**
   * Reference list
   */
  data?: Array<Reference>;
};

export type AddReferencesRequest = {
  /**
   * Reference operation list
   */
  references: Array<BaseReference>;
};

export type AddReferencesResponse = BaseResponse & {
  /**
   * Reference list
   */
  data?: Array<Reference>;
};

export type DeleteReferencesRequest = {
  /**
   * Reference ID list
   */
  referenceIds: Array<string>;
};

export type ListProjectResponse = BaseResponse & {
  /**
   * Project list
   */
  data?: Array<Project>;
};

export type GetProjectDetailResponse = BaseResponse & {
  data?: Project;
};

export type UpsertProjectRequest = {
  /**
   * Project ID (only used for update)
   */
  projectId?: string;
  /**
   * Project name
   */
  name?: string;
  /**
   * Project description
   */
  description?: string;
  /**
   * Project cover storage key
   */
  coverStorageKey?: string;
  /**
   * Custom instructions
   */
  customInstructions?: string;
};

export type UpsertProjectResponse = BaseResponse & {
  data?: Project;
};

export type UpdateProjectItemsRequest = {
  /**
   * Project ID
   */
  projectId?: string;
  /**
   * Operation type
   */
  operation?: 'add' | 'remove';
  /**
   * Item list
   */
  items?: Array<Entity>;
};

/**
 * Operation type
 */
export type operation = 'add' | 'remove';

export type DeleteProjectRequest = {
  /**
   * Project ID to delete
   */
  projectId: string;
};

export type DeleteProjectItemsRequest = {
  /**
   * Project ID
   */
  projectId: string;
  /**
   * Item list
   */
  items: Array<Entity>;
};

/**
 * Skill event type
 */
export type SkillEventType =
  | 'start'
  | 'end'
  | 'stream'
  | 'log'
  | 'artifact'
  | 'structured_data'
  | 'token_usage'
  | 'create_node'
  | 'error';

export type SkillEvent = {
  /**
   * Event type
   */
  event: SkillEventType;
  /**
   * Skill metadata
   */
  skillMeta?: SkillMeta;
  /**
   * Action step metadata
   */
  step?: ActionStepMeta;
  /**
   * Result ID
   */
  resultId?: string;
  /**
   * Result version
   */
  version?: number;
  /**
   * Event content. Only present when `event` is `stream`
   */
  content?: string;
  /**
   * Reasoning content. Only present when `event` is `stream`
   */
  reasoningContent?: string;
  /**
   * Token usage data. Only present when `event` is `token_usage`.
   */
  tokenUsage?: TokenUsageItem;
  /**
   * Log data. Only present when `event` is `log`.
   */
  log?: ActionLog;
  /**
   * Structured data. Only present when `event` is `structured_data`.
   */
  structuredData?: {
    [key: string]: unknown;
  };
  /**
   * Artifact data. Only present when `event` is `artifact`.
   */
  artifact?: Artifact;
  /**
   * Canvas node data. Only present when `event` is `create_node`.
   */
  node?: CanvasNode;
  /**
   * Error data. Only present when `event` is `error`.
   * @deprecated
   */
  error?: BaseResponse;
  /**
   * Original error message. Only present when `event` is `error`.
   */
  originError?: string;
};

export type ShareRecord = {
  /**
   * Share ID
   */
  shareId: string;
  /**
   * Share title
   */
  title?: string;
  /**
   * Entity type
   */
  entityType: EntityType;
  /**
   * Entity ID
   */
  entityId: string;
  /**
   * Whether to allow duplication of the shared entity
   */
  allowDuplication?: boolean;
  /**
   * Parent share ID
   */
  parentShareId?: string;
  /**
   * Canvas template ID
   */
  templateId?: string;
  /**
   * Create timestamp
   */
  createdAt?: string;
  /**
   * Update timestamp
   */
  updatedAt?: string;
};

export type UpsertCodeArtifactRequest = {
  /**
   * Code artifact ID (not needed for creation)
   */
  artifactId?: string;
  /**
   * Code artifact title
   */
  title?: string;
  /**
   * Code artifact type
   */
  type?: string;
  /**
   * Code artifact content
   */
  content?: string;
  /**
   * Code artifact language
   */
  language?: string;
  /**
   * Code artifact preview storage key
   */
  previewStorageKey?: string;
  /**
   * Whether to create the code artifact if it does not exist
   */
  createIfNotExists?: boolean;
};

export type UpsertCodeArtifactResponse = BaseResponse & {
  data?: CodeArtifact;
};

export type GetCodeArtifactDetailResponse = BaseResponse & {
  data?: CodeArtifact;
};

export type CreateShareRequest = {
  /**
   * Entity type
   */
  entityType: EntityType;
  /**
   * Entity ID
   */
  entityId: string;
  /**
   * Share title
   */
  title?: string;
  /**
   * Whether to allow duplication of the shared entity
   */
  allowDuplication?: boolean;
  /**
   * Parent share ID
   */
  parentShareId?: string;
  /**
   * Raw share data (JSON string)
   */
  shareData?: string;
  /**
   * Share data storage key
   */
  shareDataStorageKey?: string;
  /**
   * Cover storage key
   */
  coverStorageKey?: string;
};

export type CreateShareResponse = BaseResponse & {
  /**
   * Share created
   */
  data?: ShareRecord;
};

export type ListShareResponse = BaseResponse & {
  /**
   * Share record list
   */
  data?: Array<ShareRecord>;
};

export type DeleteShareRequest = {
  /**
   * Share ID
   */
  shareId: string;
};

export type DuplicateShareRequest = {
  /**
   * Share ID
   */
  shareId: string;
  /**
   * Project ID to duplicate the share to
   */
  projectId?: string;
};

export type DuplicateShareResponse = BaseResponse & {
  /**
   * Duplicated entity
   */
  data?: Entity;
};

export type ListLabelClassesResponse = BaseResponse & {
  /**
   * Label class list
   */
  data?: Array<LabelClass>;
};

export type CreateLabelClassRequest = {
  /**
   * Label class name
   */
  name: string;
  /**
   * Label display name
   */
  displayName: string;
  /**
   * Label icon
   */
  icon?: Icon;
  /**
   * Label creation instruction prompt
   */
  prompt: string;
};

export type UpdateLabelClassRequest = {
  /**
   * Label class ID
   */
  labelClassId: string;
  /**
   * Label class name
   */
  name?: string;
  /**
   * Label display name
   */
  displayName?: string;
  /**
   * Label icon
   */
  icon?: Icon;
  /**
   * Label creation instruction prompt
   */
  prompt?: string;
};

export type UpsertLabelClassResponse = BaseResponse & {
  /**
   * Label class upserted
   */
  data?: LabelClass;
};

export type DeleteLabelClassRequest = {
  /**
   * Label class ID to delete
   */
  labelClassId: string;
};

export type ListLabelInstancesResponse = BaseResponse & {
  /**
   * Label list
   */
  data?: Array<LabelInstance>;
};

export type CreateLabelInstanceRequest = {
  /**
   * Label class ID
   */
  labelClassId: string;
  /**
   * Label value list
   */
  valueList: Array<string>;
  /**
   * Label entity type
   */
  entityType: EntityType;
  /**
   * Label entity ID
   */
  entityId: string;
};

export type UpdateLabelInstanceRequest = {
  /**
   * Label ID to update
   */
  labelId?: string;
  /**
   * Updated label value
   */
  value?: string;
};

export type UpsertLabelInstanceResponse = BaseResponse & {
  /**
   * Label instance upserted
   */
  data?: Array<LabelInstance>;
};

export type DeleteLabelInstanceRequest = {
  /**
   * Label ID to delete
   */
  labelId: string;
};

export type Action = {
  /**
   * Action type
   */
  actionType: ActionType;
  /**
   * Action name
   */
  actionName: string;
  /**
   * Action icon
   */
  icon?: Icon;
};

export type ListActionResponse = BaseResponse & {
  /**
   * Action list
   */
  data?: Array<Action>;
};

export type ListSkillResponse = BaseResponse & {
  /**
   * Skill list
   */
  data?: Array<Skill>;
};

export type ListSkillInstanceResponse = BaseResponse & {
  /**
   * Skill list
   */
  data?: Array<SkillInstance>;
};

export type SkillInstanceCreateParam = {
  /**
   * Skill template name
   */
  tplName?: string;
  /**
   * Skill display name
   */
  displayName: string;
  /**
   * Skill description
   */
  description?: string;
  /**
   * Skill instance icon
   */
  icon?: Icon;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
};

export type CreateSkillInstanceRequest = {
  /**
   * Skill instances to upsert
   */
  instanceList: Array<SkillInstanceCreateParam>;
};

export type CreateSkillInstanceResponse = BaseResponse & {
  /**
   * Skill instance list
   */
  data?: Array<SkillInstance>;
};

export type UpdateSkillInstanceRequest = {
  /**
   * Skill ID
   */
  skillId: string;
  /**
   * Skill display name
   */
  displayName?: string;
  /**
   * Skill description
   */
  description?: string;
  /**
   * Skill instance icon
   */
  icon?: Icon;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
};

export type UpdateSkillInstanceResponse = BaseResponse & {
  /**
   * Skill instance list
   */
  data?: SkillInstance;
};

export type PinSkillInstanceRequest = {
  /**
   * Skill ID to pin
   */
  skillId: string;
};

export type UnpinSkillInstanceRequest = {
  /**
   * Skill ID to unpin
   */
  skillId: string;
};

export type DeleteSkillInstanceRequest = {
  /**
   * Skill ID to delete
   */
  skillId: string;
};

/**
 * Skill input
 */
export type SkillInput = {
  /**
   * User query
   */
  query?: string;
  /**
   * Image list (storage keys)
   */
  images?: Array<string>;
};

/**
 * Skill context resource item
 */
export type SkillContextResourceItem = {
  /**
   * Resource ID (if empty, this will be considered as external resource)
   */
  resourceId?: string;
  /**
   * Resource
   */
  resource?: Resource;
  /**
   * Whether this resource is current
   */
  isCurrent?: boolean;
  /**
   * Resource context metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Skill context document item
 */
export type SkillContextDocumentItem = {
  /**
   * Document ID
   */
  docId?: string;
  /**
   * Document
   */
  document?: Document;
  /**
   * Whether this document is current
   */
  isCurrent?: boolean;
  /**
   * Canvas context metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Skill context code artifact item
 */
export type SkillContextCodeArtifactItem = {
  /**
   * Artifact ID
   */
  artifactId?: string;
  /**
   * Code artifact
   */
  codeArtifact?: CodeArtifact;
  /**
   * Whether this code artifact is current
   */
  isCurrent?: boolean;
  /**
   * Code artifact context metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Skill context content item
 */
export type SkillContextContentItem = {
  /**
   * Content
   */
  content: string;
  /**
   * Content context metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Skill context url item
 */
export type SkillContextUrlItem = {
  /**
   * URL
   */
  url: string;
  /**
   * URL context metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Skill invocation context
 */
export type SkillContext = {
  /**
   * Context resources
   */
  resources?: Array<SkillContextResourceItem>;
  /**
   * Context documents
   */
  documents?: Array<SkillContextDocumentItem>;
  /**
   * Context code artifacts
   */
  codeArtifacts?: Array<SkillContextCodeArtifactItem>;
  /**
   * Context content list
   */
  contentList?: Array<SkillContextContentItem>;
  /**
   * List of URLs
   */
  urls?: Array<SkillContextUrlItem>;
};

export type SkillContextKey = 'resources' | 'documents' | 'contentList' | 'urls';

export type SelectionKey =
  | 'documentSelection'
  | 'resourceSelection'
  | 'skillResponseSelection'
  | 'extensionWeblinkSelection'
  | 'documentCursorSelection'
  | 'documentBeforeCursorSelection'
  | 'documentAfterCursorSelection';

export type SkillContextRule = {
  /**
   * Context key
   */
  key: SkillContextKey;
  /**
   * Maximum number of items
   */
  limit?: number;
  /**
   * Whether this context is required
   */
  required?: boolean;
  /**
   * Preferred selection keys (only applicable when key is `contentList`)
   */
  preferredSelectionKeys?: Array<SelectionKey>;
};

export type ContextRuleGroupRelation = 'regular' | 'mutuallyExclusive';

export type SkillContextRuleGroup = {
  /**
   * Skill context rules
   */
  rules: Array<SkillContextRule>;
  /**
   * Rule group relation
   */
  relation?: ContextRuleGroupRelation;
  /**
   * Preferred context keys
   */
  preferredContextKeys?: Array<SkillContextKey>;
};

export type SkillInvocationConfig = {
  /**
   * Skill context rule group
   */
  context?: SkillContextRuleGroup;
};

export type ActionType = 'skill' | 'tool';

export type ActionContextType = 'resource' | 'document';

export type ActionContextEntity = {
  /**
   * Entity title
   */
  title?: string;
  /**
   * Entity content
   */
  content?: string;
};

export type ActionContextItem = {
  /**
   * Context item type
   */
  type?: ActionContextType;
  /**
   * Entity ID
   */
  entityId?: string;
  /**
   * Entity data (will be auto populated if not provided)
   */
  entityData?: ActionContextEntity;
  /**
   * Context metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

export type InvokeSkillRequest = {
  /**
   * Skill input
   */
  input?: SkillInput;
  /**
   * Skill invocation context
   */
  context?: SkillContext;
  /**
   * Skill result history
   */
  resultHistory?: Array<ActionResult>;
  /**
   * Skill runtime config
   */
  runtimeConfig?: SkillRuntimeConfig;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
  /**
   * Skill name (if not provided, commonQnA will be used)
   */
  skillName?: string;
  /**
   * Skill invocation target
   */
  target?: Entity;
  /**
   * Project ID
   */
  projectId?: string;
  /**
   * Result ID associated with this invocation.
   * 1) If not provided, a new resultId will be generated.
   * 2) If there is no existing result with this resultId, it will be created and run.
   * 3) If there is an existing result with this resultId, it will be rerun.
   *
   */
  resultId?: string;
  /**
   * Selected output locale
   */
  locale?: string;
  /**
   * Selected model
   * @deprecated
   */
  modelName?: string;
  /**
   * Selected model item ID
   */
  modelItemId?: string;
  /**
   * Skill ID
   */
  skillId?: string;
  /**
   * Trigger ID
   */
  triggerId?: string;
  /**
   * Selected MCP servers
   */
  selectedMcpServers?: Array<string>;
};

export type InvokeSkillResponse = BaseResponse & {
  /**
   * Skill result ID
   */
  resultId?: string;
};

export type ListSkillTriggerResponse = BaseResponse & {
  /**
   * Skill trigger list
   */
  data?: Array<SkillTrigger>;
};

export type SkillTriggerCreateParam = {
  /**
   * Skill ID
   */
  skillId: string;
  /**
   * Trigger display name
   */
  displayName: string;
  /**
   * Trigger type
   */
  triggerType: SkillTriggerType;
  /**
   * Simple event name (only required when trigger type is `simpleEvent`)
   */
  simpleEventName?: SimpleEventName;
  /**
   * Timer config (only required when trigger type is `timer`)
   */
  timerConfig?: TimerTriggerConfig;
  /**
   * Skill input
   */
  input?: SkillInput;
  /**
   * Skill invocation context
   */
  context?: SkillContext;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
  /**
   * Whether this trigger is enabled
   */
  enabled?: boolean;
};

export type CreateSkillTriggerRequest = {
  /**
   * Skill triggers to upsert
   */
  triggerList: Array<SkillTriggerCreateParam>;
};

export type CreateSkillTriggerResponse = BaseResponse & {
  /**
   * Skill trigger list
   */
  data?: Array<SkillTrigger>;
};

export type UpdateSkillTriggerRequest = SkillTriggerCreateParam & {
  /**
   * Trigger ID
   */
  triggerId: string;
};

export type UpdateSkillTriggerResponse = BaseResponse & {
  /**
   * Updated skill trigger
   */
  data?: SkillTrigger;
};

export type DeleteSkillTriggerRequest = {
  /**
   * Trigger ID to delete
   */
  triggerId: string;
};

export type UpdateUserSettingsRequest = {
  /**
   * User name
   */
  name?: string;
  /**
   * User nickname
   */
  nickname?: string;
  /**
   * User avatar
   */
  avatar?: string;
  /**
   * User avatar storage key
   */
  avatarStorageKey?: string;
  /**
   * UI locale
   */
  uiLocale?: string;
  /**
   * Output locale
   */
  outputLocale?: string;
  /**
   * User preferences
   */
  preferences?: UserPreferences;
  /**
   * Onboarding config
   */
  onboarding?: OnboardingConfig;
};

export type CheckSettingsFieldResult = {
  /**
   * Settings field
   */
  field: string;
  /**
   * Settings field value
   */
  value: string;
  /**
   * Whether the field value is available
   */
  available: boolean;
};

export type CheckSettingsFieldResponse = BaseResponse & {
  /**
   * Settings field check result
   */
  data?: CheckSettingsFieldResult;
};

export type CreateCheckoutSessionRequest = {
  /**
   * Subscription plan type
   */
  planType: SubscriptionPlanType;
  /**
   * Subscription billing interval
   */
  interval?: SubscriptionInterval;
};

export type CreateCheckoutSessionResponse = BaseResponse & {
  /**
   * Checkout session
   */
  data?: {
    /**
     * Checkout session URL
     */
    url?: string;
  };
};

export type CreatePortalSessionResponse = BaseResponse & {
  /**
   * Portal session
   */
  data?: {
    /**
     * Portal session URL
     */
    url?: string;
  };
};

export type SubscriptionPlan = {
  /**
   * Subscription plan type
   */
  planType?: string;
  /**
   * Token quota per month (T1)
   */
  t1TokenQuota?: number;
  /**
   * Token quota per month (T2)
   */
  t2TokenQuota?: number;
  /**
   * Object storage quota (in bytes)
   */
  objectStorageQuota?: string;
  /**
   * Vector storage quota (in bytes)
   */
  vectorStorageQuota?: string;
};

export type GetSubscriptionPlansResponse = BaseResponse & {
  /**
   * Subscription plans
   */
  data?: Array<SubscriptionPlan>;
};

export type SubscriptionUsageData = {
  /**
   * Token usage meter
   */
  token?: TokenUsageMeter;
  /**
   * Storage usage meter
   */
  storage?: StorageUsageMeter;
  /**
   * File parsing meter
   */
  fileParsing?: FileParsingMeter;
};

export type GetSubscriptionUsageResponse = BaseResponse & {
  /**
   * Subscription usage
   */
  data?: SubscriptionUsageData;
};

export type WebSearchRequest = {
  /**
   * Search query
   */
  q?: string;
  /**
   * Language/locale code
   */
  hl?: string;
  /**
   * Country/region code
   */
  gl?: string;
  /**
   * Location string
   */
  location?: string;
  /**
   * Web search result limit
   */
  limit?: number;
};

export type BatchWebSearchRequest = {
  /**
   * Web search result limit
   */
  limit?: number;
  /**
   * Web search queries
   */
  queries?: Array<WebSearchRequest>;
};

export type MultiLingualWebSearchRequest = {
  /**
   * Search query
   */
  query: string;
  /**
   * List of search locales
   */
  searchLocaleList: Array<string>;
  /**
   * Display locale
   */
  displayLocale?: string;
  /**
   * Web search result limit per locale
   */
  searchLimit?: number;
  /**
   * Whether to enable reranking of search results
   */
  enableRerank?: boolean;
  /**
   * Limit for reranked results
   */
  rerankLimit?: number;
  /**
   * Relevance threshold for reranking
   */
  rerankRelevanceThreshold?: number;
};

export type MultiLingualWebSearchResponse = BaseResponse & {
  /**
   * Multilingual web search results
   */
  data?: {
    /**
     * Search result sources
     */
    sources: Array<Source>;
    /**
     * Search steps
     */
    searchSteps: Array<SearchStep>;
  };
};

export type WebSearchResult = {
  /**
   * Web search result name
   */
  name?: string;
  /**
   * Web search result url
   */
  url?: string;
  /**
   * Web search result snippet
   */
  snippet?: string;
  /**
   * Web search result locale
   */
  locale?: string;
};

export type WebSearchResponse = BaseResponse & {
  /**
   * Web search results
   */
  data?: Array<WebSearchResult>;
};

export type RerankResponse = BaseResponse & {
  /**
   * Reranked results
   */
  data?: Array<SearchResult>;
};

/**
 * Search options for internal use
 */
export type SearchOptions = {
  /**
   * Whether to enable reranker
   */
  enableReranker?: boolean;
};

export type SearchDomain = 'resource' | 'document' | 'canvas';

export type SearchMode = 'keyword' | 'vector' | 'hybrid';

export type SearchRequest = {
  /**
   * Search query (if empty, return last updated data)
   */
  query: string;
  /**
   * Search domains (if not specified, return all domains)
   */
  domains?: Array<SearchDomain>;
  /**
   * Search entities
   */
  entities?: Array<Entity>;
  /**
   * Search mode
   */
  mode?: SearchMode;
  /**
   * Project ID
   */
  projectId?: string;
  /**
   * Search result limit for each domain
   */
  limit?: number;
};

export type SearchResultSnippet = {
  /**
   * Search result content text
   */
  text?: string;
  /**
   * Search result highlighted content text with em html tags
   */
  highlightedText?: string;
};

export type SearchResult = {
  /**
   * Search result ID to navigate to
   */
  id: string;
  /**
   * Search result domain
   */
  domain: SearchDomain;
  /**
   * Search result title
   */
  title: string;
  /**
   * Search result highlighted title with em html tags
   */
  highlightedTitle?: string;
  /**
   * Search result content preview
   */
  contentPreview?: string;
  /**
   * Search result content list with highlight marks
   */
  snippets?: Array<SearchResultSnippet>;
  /**
   * Search result relevance score
   */
  relevanceScore?: number;
  /**
   * Search result metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * Data creation time
   */
  createdAt?: string;
  /**
   * Data update time
   */
  updatedAt?: string;
};

export type SearchResponse = BaseResponse & {
  /**
   * Search result
   */
  data?: Array<SearchResult>;
};

export type ScrapeWeblinkRequest = {
  /**
   * Weblink URL
   */
  url: string;
};

export type ScrapeWeblinkResult = {
  /**
   * Weblink title
   */
  title?: string;
  /**
   * Weblink description
   */
  description?: string;
  /**
   * Weblink image
   */
  image?: string;
};

export type ScrapeWeblinkResponse = BaseResponse & {
  /**
   * Weblink scrape result
   */
  data?: ScrapeWeblinkResult;
};

export type FileVisibility = 'public' | 'private';

export type UploadRequest = {
  /**
   * File to upload
   */
  file: Blob | File;
  /**
   * Entity ID
   */
  entityId?: string;
  /**
   * Entity type
   */
  entityType?: EntityType;
  /**
   * File visibility (default is private)
   */
  visibility?: FileVisibility;
  /**
   * Storage key (if provided, the file will be replaced if it already exists)
   */
  storageKey?: string;
};

export type UploadResponse = BaseResponse & {
  /**
   * File upload result
   */
  data?: {
    /**
     * File URL
     */
    url: string;
    /**
     * Storage key
     */
    storageKey: string;
  };
};

export type ConvertRequest = {
  /**
   * The file to convert
   */
  file: Blob | File;
  /**
   * Source format (e.g., html)
   */
  from?: string;
  /**
   * Target format (e.g., markdown)
   */
  to?: string;
};

export type ConvertResponse = BaseResponse & {
  data?: {
    /**
     * Converted markdown content
     */
    content?: string;
  };
};

export type ModelCapabilities = {
  /**
   * Whether this model supports function calling
   */
  functionCall?: boolean;
  /**
   * Whether this model can take images as input
   */
  vision?: boolean;
  /**
   * Whether this model includes reasoning content
   */
  reasoning?: boolean;
  /**
   * Whether this model supports context caching
   */
  contextCaching?: boolean;
};

export type ModelInfo = {
  /**
   * Model name
   */
  name: string;
  /**
   * Model label
   */
  label: string;
  /**
   * Model provider
   */
  provider: string;
  /**
   * Model provider item ID
   */
  providerItemId?: string;
  /**
   * Model tier
   */
  tier?: ModelTier;
  /**
   * Model context limit (in tokens)
   */
  contextLimit: number;
  /**
   * Model max output length (in tokens)
   */
  maxOutput: number;
  /**
   * Model capabilities
   */
  capabilities?: ModelCapabilities;
  /**
   * Whether this model is the default model
   */
  isDefault?: boolean;
  /**
   * Model group
   */
  group?: string;
};

export type ListModelsResponse = BaseResponse & {
  /**
   * Model list
   */
  data?: Array<ModelInfo>;
};

export type ProviderCategory =
  | 'llm'
  | 'embedding'
  | 'reranker'
  | 'webSearch'
  | 'urlParsing'
  | 'pdfParsing';

/**
 * General provider info
 */
export type Provider = {
  /**
   * Provider ID
   */
  providerId: string;
  /**
   * Provider key
   */
  providerKey: string;
  /**
   * Provider name
   */
  name: string;
  /**
   * Provider categories
   */
  categories: Array<ProviderCategory>;
  /**
   * Provider base URL
   */
  baseUrl?: string;
  /**
   * Whether the provider is enabled
   */
  enabled: boolean;
  /**
   * Whether the provider is global
   */
  isGlobal?: boolean;
  /**
   * Provider API key (this will never be exposed to the frontend)
   */
  apiKey?: string;
};

/**
 * Provider config for LLMs
 */
export type LLMModelConfig = {
  /**
   * Model ID
   */
  modelId: string;
  /**
   * Model name
   */
  modelName: string;
  /**
   * Model context limit (in tokens)
   */
  contextLimit?: number;
  /**
   * Model max output length (in tokens)
   */
  maxOutput?: number;
  /**
   * Model capabilities
   */
  capabilities?: ModelCapabilities;
};

/**
 * Provider config for embeddings
 */
export type EmbeddingModelConfig = {
  /**
   * Embedding model ID
   */
  modelId: string;
  /**
   * Embedding model name
   */
  modelName?: string;
  /**
   * Embedding model dimension
   */
  dimensions: number;
  /**
   * Embedding model batch size
   */
  batchSize?: number;
};

/**
 * Provider config for rerankers
 */
export type RerankerModelConfig = {
  /**
   * Reranking model ID
   */
  modelId: string;
  /**
   * Reranking model name
   */
  modelName?: string;
  /**
   * Number of top results to return
   */
  topN?: number;
  /**
   * Minimum relevance score threshold (0.0-1.0)
   */
  relevanceThreshold?: number;
};

export type ProviderItemConfig = LLMModelConfig | EmbeddingModelConfig | RerankerModelConfig;

export type ProviderItemOption = {
  /**
   * Provider item name
   */
  name?: string;
  /**
   * Provider category
   */
  category?: ProviderCategory;
  /**
   * Provider item tier
   */
  tier?: ModelTier;
  /**
   * Provider item config
   */
  config?: ProviderItemConfig;
};

export type ProviderItem = {
  /**
   * Provider item ID
   */
  itemId: string;
  /**
   * Provider item name
   */
  name: string;
  /**
   * Whether the provider item is enabled
   */
  enabled: boolean;
  /**
   * Provider category
   */
  category: ProviderCategory;
  /**
   * Provider item tier
   */
  tier?: ModelTier;
  /**
   * Provider ID
   */
  providerId: string;
  /**
   * Provider detail info
   */
  provider?: Provider;
  /**
   * Provider item config
   */
  config?: ProviderItemConfig;
  /**
   * Provider item order
   */
  order?: number;
  /**
   * Provider item group
   */
  group?: string;
};

export type ListProvidersResponse = BaseResponse & {
  data?: Array<Provider>;
};

export type UpsertProviderRequest = {
  /**
   * Provider ID (only for update)
   */
  providerId?: string;
  /**
   * Provider key
   */
  providerKey?: string;
  /**
   * Provider name
   */
  name?: string;
  /**
   * Provider categories
   */
  categories?: Array<ProviderCategory>;
  /**
   * Provider API key
   */
  apiKey?: string;
  /**
   * Provider base URL
   */
  baseUrl?: string;
  /**
   * Whether the provider is enabled
   */
  enabled?: boolean;
};

export type UpsertProviderResponse = BaseResponse & {
  data?: Provider;
};

export type DeleteProviderRequest = {
  /**
   * Provider ID
   */
  providerId: string;
};

export type ListProviderItemOptionsResponse = BaseResponse & {
  data?: Array<ProviderItemOption>;
};

export type ListProviderItemsResponse = BaseResponse & {
  data?: Array<ProviderItem>;
};

export type UpsertProviderItemRequest = {
  /**
   * Provider item ID (only for update)
   */
  itemId?: string;
  /**
   * Provider ID
   */
  providerId?: string;
  /**
   * Provider item name
   */
  name?: string;
  /**
   * Provider category
   */
  category?: ProviderCategory;
  /**
   * Whether the provider item is enabled
   */
  enabled?: boolean;
  /**
   * Provider item config
   */
  config?: ProviderItemConfig;
  /**
   * Provider item order
   */
  order?: number;
  /**
   * Provider item group
   */
  group?: string;
};

export type UpsertProviderItemResponse = BaseResponse & {
  data?: ProviderItem;
};

export type BatchUpsertProviderItemsRequest = {
  /**
   * Provider items to upsert
   */
  items: Array<UpsertProviderItemRequest>;
};

export type BatchUpsertProviderItemsResponse = BaseResponse & {
  /**
   * Upserted provider items
   */
  data?: Array<ProviderItem>;
};

export type DeleteProviderItemRequest = {
  /**
   * Provider item ID
   */
  itemId: string;
};

export type DocumentInterface = {
  /**
   * An optional identifier for the document. Ideally this should be unique across the document collection and formatted as a UUID.
   */
  id?: string;
  /**
   * The main content of the document.
   */
  pageContent?: string;
  /**
   * Metadata associated with the document.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

export type InMemorySearchResponse = BaseResponse & {
  data?: Array<DocumentInterface>;
};

export type CanvasNodeType =
  | 'document'
  | 'codeArtifact'
  | 'website'
  | 'resource'
  | 'skill'
  | 'tool'
  | 'skillResponse'
  | 'toolResponse'
  | 'memo'
  | 'group'
  | 'image';

export type CanvasNodeData = {
  /**
   * Node title
   */
  title: string;
  /**
   * Node entity ID
   */
  entityId: string;
  /**
   * Node content preview
   */
  contentPreview?: string;
  /**
   * Node metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

export type CanvasNode = {
  /**
   * Node type
   */
  type: CanvasNodeType;
  data: CanvasNodeData;
};

export type ListMcpServersData2 = {
  query?: {
    /**
     * Filter by enabled status
     */
    enabled?: boolean;
    /**
     * MCP server type
     */
    type?: 'sse' | 'streamable' | 'stdio';
  };
};

export type ListMcpServersResponse2 = ListMcpServersResponse;

export type ListMcpServersError = unknown;

export type CreateMcpServerData = {
  body: UpsertMcpServerRequest;
};

export type CreateMcpServerResponse = UpsertMcpServerResponse;

export type CreateMcpServerError = unknown;

export type UpdateMcpServerData = {
  body: UpsertMcpServerRequest;
};

export type UpdateMcpServerResponse = UpsertMcpServerResponse;

export type UpdateMcpServerError = unknown;

export type DeleteMcpServerData = {
  body: DeleteMcpServerRequest;
};

export type DeleteMcpServerResponse2 = DeleteMcpServerResponse;

export type DeleteMcpServerError = unknown;

export type ValidateMcpServerData = {
  body: UpsertMcpServerRequest;
};

export type ValidateMcpServerResponse2 = ValidateMcpServerResponse;

export type ValidateMcpServerError = unknown;

export type ListPagesData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
  };
};

export type ListPagesResponse2 = ListPagesResponse;

export type ListPagesError = unknown;

export type GetPageDetailData = {
  path: {
    /**
     * Page ID
     */
    pageId: string;
  };
};

export type GetPageDetailResponse = PageDetailResponse;

export type GetPageDetailError = unknown;

export type UpdatePageData = {
  body: UpdatePageRequest;
  path: {
    /**
     * Page ID
     */
    pageId: string;
  };
};

export type UpdatePageResponse2 = UpdatePageResponse;

export type UpdatePageError = unknown;

export type DeletePageData = {
  path: {
    /**
     * Page ID
     */
    pageId: string;
  };
};

export type DeletePageResponse2 = DeletePageResponse;

export type DeletePageError = unknown;

export type SharePageData = {
  path: {
    /**
     * Page ID
     */
    pageId: string;
  };
};

export type SharePageResponse2 = SharePageResponse;

export type SharePageError = unknown;

export type DeletePageNodeData = {
  path: {
    /**
     * Node ID
     */
    nodeId: string;
    /**
     * Page ID
     */
    pageId: string;
  };
};

export type DeletePageNodeResponse2 = DeletePageNodeResponse;

export type DeletePageNodeError = unknown;

export type GetPageByCanvasIdData = {
  path: {
    /**
     * Canvas ID
     */
    canvasId: string;
  };
};

export type GetPageByCanvasIdResponse = CanvasPageResponse;

export type GetPageByCanvasIdError = unknown;

export type AddNodesToCanvasPageData = {
  body: AddPageNodesRequest;
  path: {
    /**
     * Canvas ID
     */
    canvasId: string;
  };
};

export type AddNodesToCanvasPageResponse = AddPageNodesResponse;

export type AddNodesToCanvasPageError = unknown;

export type GetAuthConfigResponse = AuthConfigResponse;

export type GetAuthConfigError = unknown;

export type RefreshTokenResponse = unknown;

export type RefreshTokenError = unknown;

export type EmailSignupData2 = {
  body: EmailSignupRequest;
};

export type EmailSignupResponse2 = EmailSignupResponse;

export type EmailSignupError = unknown;

export type EmailLoginData2 = {
  body: EmailLoginRequest;
};

export type EmailLoginResponse2 = EmailLoginResponse;

export type EmailLoginError = unknown;

export type CreateVerificationData2 = {
  body: CreateVerificationRequest;
};

export type CreateVerificationResponse2 = CreateVerificationResponse;

export type CreateVerificationError = unknown;

export type ResendVerificationData = {
  body: ResendVerificationRequest;
};

export type ResendVerificationResponse = BaseResponse;

export type ResendVerificationError = unknown;

export type CheckVerificationData = {
  body: CheckVerificationRequest;
};

export type CheckVerificationResponse = BaseResponse;

export type CheckVerificationError = unknown;

export type LogoutResponse = unknown;

export type LogoutError = unknown;

export type GetCollabTokenResponse2 = GetCollabTokenResponse;

export type GetCollabTokenError = unknown;

export type ListCanvasesData = {
  query?: {
    /**
     * Order
     */
    order?: ListOrder;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
    /**
     * Related project ID
     */
    projectId?: string;
  };
};

export type ListCanvasesResponse = ListCanvasResponse;

export type ListCanvasesError = unknown;

export type GetCanvasDetailData = {
  query: {
    /**
     * Canvas ID
     */
    canvasId: string;
  };
};

export type GetCanvasDetailResponse2 = GetCanvasDetailResponse;

export type GetCanvasDetailError = unknown;

export type GetCanvasDataData = {
  query: {
    /**
     * Canvas ID
     */
    canvasId: string;
  };
};

export type GetCanvasDataResponse = ExportCanvasResponse;

export type GetCanvasDataError = unknown;

export type ExportCanvasData = {
  query: {
    /**
     * Canvas ID
     */
    canvasId: string;
  };
};

export type ExportCanvasResponse2 = ExportCanvasResponse;

export type ExportCanvasError = unknown;

export type ImportCanvasData = {
  body: RawCanvasData;
};

export type ImportCanvasResponse = UpsertCanvasResponse;

export type ImportCanvasError = unknown;

export type CreateCanvasData = {
  body: UpsertCanvasRequest;
};

export type CreateCanvasResponse = UpsertCanvasResponse;

export type CreateCanvasError = unknown;

export type DuplicateCanvasData = {
  body: DuplicateCanvasRequest;
};

export type DuplicateCanvasResponse = UpsertCanvasResponse;

export type DuplicateCanvasError = unknown;

export type UpdateCanvasData = {
  body: UpsertCanvasRequest;
};

export type UpdateCanvasResponse = UpsertCanvasResponse;

export type UpdateCanvasError = unknown;

export type DeleteCanvasData = {
  body: DeleteCanvasRequest;
};

export type DeleteCanvasResponse = BaseResponse;

export type DeleteCanvasError = unknown;

export type AutoNameCanvasData = {
  body: AutoNameCanvasRequest;
};

export type AutoNameCanvasResponse2 = AutoNameCanvasResponse;

export type AutoNameCanvasError = unknown;

export type ListCanvasTemplatesData = {
  query?: {
    /**
     * Canvas template category ID
     */
    categoryId?: string;
    /**
     * Language code
     */
    language?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
    /**
     * Scope
     */
    scope?: 'public' | 'private';
  };
};

export type ListCanvasTemplatesResponse = ListCanvasTemplateResponse;

export type ListCanvasTemplatesError = unknown;

export type CreateCanvasTemplateData = {
  body: CreateCanvasTemplateRequest;
};

export type CreateCanvasTemplateResponse = UpsertCanvasTemplateResponse;

export type CreateCanvasTemplateError = unknown;

export type UpdateCanvasTemplateData = {
  body: UpdateCanvasTemplateRequest;
};

export type UpdateCanvasTemplateResponse = UpsertCanvasTemplateResponse;

export type UpdateCanvasTemplateError = unknown;

export type ListCanvasTemplateCategoriesResponse = ListCanvasTemplateCategoryResponse;

export type ListCanvasTemplateCategoriesError = unknown;

export type ListResourcesData = {
  query?: {
    /**
     * Order
     */
    order?: ListOrder;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
    /**
     * Related project ID
     */
    projectId?: string;
    /**
     * Resource ID
     */
    resourceId?: string;
    /**
     * Resource type
     */
    resourceType?: ResourceType;
  };
};

export type ListResourcesResponse = ListResourceResponse;

export type ListResourcesError = unknown;

export type GetResourceDetailData = {
  query: {
    /**
     * Resource ID to retrieve
     */
    resourceId: string;
  };
};

export type GetResourceDetailResponse2 = GetResourceDetailResponse;

export type GetResourceDetailError = unknown;

export type UpdateResourceData = {
  /**
   * Resource update request
   */
  body: UpsertResourceRequest;
};

export type UpdateResourceResponse = UpsertResourceResponse;

export type UpdateResourceError = unknown;

export type CreateResourceData = {
  /**
   * Resource creation request
   */
  body: UpsertResourceRequest;
};

export type CreateResourceResponse = UpsertResourceResponse;

export type CreateResourceError = unknown;

export type CreateResourceWithFileData = {
  body: {
    /**
     * File to upload
     */
    file: Blob | File;
    /**
     * Resource title
     */
    title: string;
    /**
     * Resource type
     */
    resourceType: ResourceType;
    /**
     * Resource ID (only used for update)
     */
    resourceId?: string;
    /**
     * Resource metadata
     */
    data?: ResourceMeta;
  };
};

export type CreateResourceWithFileResponse = UpsertResourceResponse;

export type CreateResourceWithFileError = unknown;

export type BatchCreateResourceData = {
  /**
   * Resource creation request
   */
  body: Array<UpsertResourceRequest>;
};

export type BatchCreateResourceResponse2 = BatchCreateResourceResponse;

export type BatchCreateResourceError = unknown;

export type ReindexResourceData = {
  body: ReindexResourceRequest;
};

export type ReindexResourceResponse2 = ReindexResourceResponse;

export type ReindexResourceError = unknown;

export type DeleteResourceData = {
  body: DeleteResourceRequest;
};

export type DeleteResourceResponse = BaseResponse;

export type DeleteResourceError = unknown;

export type ListDocumentsData = {
  query?: {
    /**
     * Order by
     */
    order?: ListOrder;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
    /**
     * Related project ID
     */
    projectId?: string;
  };
};

export type ListDocumentsResponse = ListDocumentResponse;

export type ListDocumentsError = unknown;

export type GetDocumentDetailData = {
  query: {
    /**
     * Document ID to retrieve
     */
    docId: string;
  };
};

export type GetDocumentDetailResponse2 = GetDocumentDetailResponse;

export type GetDocumentDetailError = unknown;

export type ExportDocumentData = {
  query: {
    /**
     * Export document ID to retrieve
     */
    docId: string;
    /**
     * Export format
     */
    format?: 'markdown' | 'docx' | 'pdf';
  };
};

export type ExportDocumentResponse = Blob | File;

export type ExportDocumentError = unknown;

export type UpdateDocumentData = {
  /**
   * Document update request
   */
  body: UpsertDocumentRequest;
};

export type UpdateDocumentResponse = UpsertDocumentResponse;

export type UpdateDocumentError = unknown;

export type CreateDocumentData = {
  /**
   * Document creation request
   */
  body: UpsertDocumentRequest;
};

export type CreateDocumentResponse = UpsertDocumentResponse;

export type CreateDocumentError = unknown;

export type DeleteDocumentData = {
  body: DeleteDocumentRequest;
};

export type DeleteDocumentResponse = BaseResponse;

export type DeleteDocumentError = unknown;

export type BatchUpdateDocumentData = {
  body: Array<UpsertDocumentRequest>;
};

export type BatchUpdateDocumentResponse = BaseResponse;

export type BatchUpdateDocumentError = unknown;

export type QueryReferencesData = {
  body: QueryReferencesRequest;
};

export type QueryReferencesResponse2 = unknown;

export type QueryReferencesError = unknown;

export type AddReferencesData = {
  body: AddReferencesRequest;
};

export type AddReferencesResponse2 = BaseResponse;

export type AddReferencesError = unknown;

export type DeleteReferencesData = {
  body: DeleteReferencesRequest;
};

export type DeleteReferencesResponse = unknown;

export type DeleteReferencesError = unknown;

export type ListProjectsData = {
  query?: {
    /**
     * Order by
     */
    order?: ListOrder;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
  };
};

export type ListProjectsResponse = ListProjectResponse;

export type ListProjectsError = unknown;

export type GetProjectDetailData = {
  query: {
    /**
     * Project ID
     */
    projectId: string;
  };
};

export type GetProjectDetailResponse2 = GetProjectDetailResponse;

export type GetProjectDetailError = unknown;

export type CreateProjectData = {
  body: UpsertProjectRequest;
};

export type CreateProjectResponse = UpsertProjectResponse;

export type CreateProjectError = unknown;

export type UpdateProjectData = {
  body: UpsertProjectRequest;
};

export type UpdateProjectResponse = UpsertProjectResponse;

export type UpdateProjectError = unknown;

export type UpdateProjectItemsData = {
  body: UpdateProjectItemsRequest;
};

export type UpdateProjectItemsResponse = BaseResponse;

export type UpdateProjectItemsError = unknown;

export type DeleteProjectData = {
  body: DeleteProjectRequest;
};

export type DeleteProjectResponse = BaseResponse;

export type DeleteProjectError = unknown;

export type DeleteProjectItemsData = {
  body: DeleteProjectItemsRequest;
};

export type DeleteProjectItemsResponse = BaseResponse;

export type DeleteProjectItemsError = unknown;

export type GetCodeArtifactDetailData = {
  query: {
    /**
     * Artifact ID
     */
    artifactId: string;
  };
};

export type GetCodeArtifactDetailResponse2 = GetCodeArtifactDetailResponse;

export type GetCodeArtifactDetailError = unknown;

export type CreateCodeArtifactData = {
  body: UpsertCodeArtifactRequest;
};

export type CreateCodeArtifactResponse = UpsertCodeArtifactResponse;

export type CreateCodeArtifactError = unknown;

export type UpdateCodeArtifactData = {
  body: UpsertCodeArtifactRequest;
};

export type UpdateCodeArtifactResponse = UpsertCodeArtifactResponse;

export type UpdateCodeArtifactError = unknown;

export type CreateShareData = {
  body: CreateShareRequest;
};

export type CreateShareResponse2 = CreateShareResponse;

export type CreateShareError = unknown;

export type ListSharesData = {
  query?: {
    /**
     * Entity ID
     */
    entityId?: string;
    /**
     * Entity type
     */
    entityType?: EntityType;
    /**
     * Share ID
     */
    shareId?: string;
  };
};

export type ListSharesResponse = ListShareResponse;

export type ListSharesError = unknown;

export type DeleteShareData = {
  body: DeleteShareRequest;
};

export type DeleteShareResponse = BaseResponse;

export type DeleteShareError = unknown;

export type DuplicateShareData = {
  body: DuplicateShareRequest;
};

export type DuplicateShareResponse2 = DuplicateShareResponse;

export type DuplicateShareError = unknown;

export type ListLabelClassesData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
  };
};

export type ListLabelClassesResponse2 = ListLabelClassesResponse;

export type ListLabelClassesError = unknown;

export type CreateLabelClassData = {
  /**
   * Label class creation request
   */
  body: CreateLabelClassRequest;
};

export type CreateLabelClassResponse = UpsertLabelClassResponse;

export type CreateLabelClassError = unknown;

export type UpdateLabelClassData = {
  /**
   * Label class update request
   */
  body: UpdateLabelClassRequest;
};

export type UpdateLabelClassResponse = UpsertLabelClassResponse;

export type UpdateLabelClassError = unknown;

export type DeleteLabelClassData = {
  body: DeleteLabelClassRequest;
};

export type DeleteLabelClassResponse = BaseResponse;

export type DeleteLabelClassError = unknown;

export type ListLabelInstancesData = {
  query?: {
    /**
     * Label class ID
     */
    classId?: string;
    /**
     * Entity type to retrieve
     */
    entityId?: string;
    /**
     * Entity type to retrieve
     */
    entityType?: EntityType;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
    /**
     * Label value
     */
    value?: string;
  };
};

export type ListLabelInstancesResponse2 = ListLabelInstancesResponse;

export type ListLabelInstancesError = unknown;

export type CreateLabelInstanceData = {
  /**
   * Label instance creation request
   */
  body: CreateLabelInstanceRequest;
};

export type CreateLabelInstanceResponse = UpsertLabelInstanceResponse;

export type CreateLabelInstanceError = unknown;

export type UpdateLabelInstanceData = {
  /**
   * Label update request
   */
  body: UpdateLabelInstanceRequest;
};

export type UpdateLabelInstanceResponse = UpsertLabelInstanceResponse;

export type UpdateLabelInstanceError = unknown;

export type DeleteLabelInstanceData = {
  body: DeleteLabelInstanceRequest;
};

export type DeleteLabelInstanceResponse = BaseResponse;

export type DeleteLabelInstanceError = unknown;

export type ListActionsResponse = ListActionResponse;

export type ListActionsError = unknown;

export type GetActionResultData = {
  query: {
    /**
     * Action result ID
     */
    resultId: string;
    /**
     * Action result version
     */
    version?: number;
  };
};

export type GetActionResultResponse2 = GetActionResultResponse;

export type GetActionResultError = unknown;

export type ListSkillsResponse = ListSkillResponse;

export type ListSkillsError = unknown;

export type InvokeSkillData = {
  /**
   * Skill invocation request
   */
  body: InvokeSkillRequest;
};

export type InvokeSkillResponse2 = InvokeSkillResponse;

export type InvokeSkillError = unknown;

export type StreamInvokeSkillData = {
  /**
   * Skill invocation request
   */
  body: InvokeSkillRequest;
};

export type StreamInvokeSkillResponse = string;

export type StreamInvokeSkillError = unknown;

export type ListSkillInstancesData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
    /**
     * Skill ID
     */
    skillId?: string;
    /**
     * Whether to sort by pinned skill instances
     */
    sortByPin?: boolean;
  };
};

export type ListSkillInstancesResponse = ListSkillInstanceResponse;

export type ListSkillInstancesError = unknown;

export type CreateSkillInstanceData = {
  /**
   * Skill creation request
   */
  body: CreateSkillInstanceRequest;
};

export type CreateSkillInstanceResponse2 = CreateSkillInstanceResponse;

export type CreateSkillInstanceError = unknown;

export type UpdateSkillInstanceData = {
  /**
   * Skill update request
   */
  body: UpdateSkillInstanceRequest;
};

export type UpdateSkillInstanceResponse2 = UpdateSkillInstanceResponse;

export type UpdateSkillInstanceError = unknown;

export type PinSkillInstanceData = {
  body: PinSkillInstanceRequest;
};

export type PinSkillInstanceResponse = BaseResponse;

export type PinSkillInstanceError = unknown;

export type UnpinSkillInstanceData = {
  body: UnpinSkillInstanceRequest;
};

export type UnpinSkillInstanceResponse = BaseResponse;

export type UnpinSkillInstanceError = unknown;

export type DeleteSkillInstanceData = {
  body: DeleteSkillInstanceRequest;
};

export type DeleteSkillInstanceResponse = BaseResponse;

export type DeleteSkillInstanceError = unknown;

export type ListSkillTriggersData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
    /**
     * Skill ID
     */
    skillId?: string;
  };
};

export type ListSkillTriggersResponse = ListSkillTriggerResponse;

export type ListSkillTriggersError = unknown;

export type CreateSkillTriggerData = {
  /**
   * Skill trigger creation request
   */
  body: CreateSkillTriggerRequest;
};

export type CreateSkillTriggerResponse2 = CreateSkillTriggerResponse;

export type CreateSkillTriggerError = unknown;

export type UpdateSkillTriggerData = {
  /**
   * Skill trigger update request
   */
  body: UpdateSkillTriggerRequest;
};

export type UpdateSkillTriggerResponse2 = UpdateSkillTriggerResponse;

export type UpdateSkillTriggerError = unknown;

export type DeleteSkillTriggerData = {
  body: DeleteSkillTriggerRequest;
};

export type DeleteSkillTriggerResponse = BaseResponse;

export type DeleteSkillTriggerError = unknown;

export type GetSettingsResponse = GetUserSettingsResponse;

export type GetSettingsError = unknown;

export type UpdateSettingsData = {
  body: UpdateUserSettingsRequest;
};

export type UpdateSettingsResponse = BaseResponse;

export type UpdateSettingsError = unknown;

export type CheckSettingsFieldData = {
  query: {
    /**
     * Settings field
     */
    field: 'name' | 'email';
    /**
     * Field value
     */
    value: string;
  };
};

export type CheckSettingsFieldResponse2 = CheckSettingsFieldResponse;

export type CheckSettingsFieldError = unknown;

export type GetSubscriptionPlansResponse2 = GetSubscriptionPlansResponse;

export type GetSubscriptionPlansError = unknown;

export type GetSubscriptionUsageResponse2 = GetSubscriptionUsageResponse;

export type GetSubscriptionUsageError = unknown;

export type ListModelsResponse2 = ListModelsResponse;

export type ListModelsError = unknown;

export type CreateCheckoutSessionData = {
  body: CreateCheckoutSessionRequest;
};

export type CreateCheckoutSessionResponse2 = CreateCheckoutSessionResponse;

export type CreateCheckoutSessionError = unknown;

export type CreatePortalSessionResponse2 = CreatePortalSessionResponse;

export type CreatePortalSessionError = unknown;

export type SearchData = {
  body: SearchRequest;
};

export type SearchResponse2 = SearchResponse;

export type SearchError = unknown;

export type MultiLingualWebSearchData = {
  body: MultiLingualWebSearchRequest;
};

export type MultiLingualWebSearchResponse2 = MultiLingualWebSearchResponse;

export type MultiLingualWebSearchError = unknown;

export type ListProvidersData = {
  query?: {
    /**
     * Provider category
     */
    category?: ProviderCategory;
    /**
     * Whether the provider is enabled
     */
    enabled?: boolean;
    /**
     * Provider key
     */
    providerKey?: string;
  };
};

export type ListProvidersResponse2 = ListProvidersResponse;

export type ListProvidersError = unknown;

export type CreateProviderData = {
  body: UpsertProviderRequest;
};

export type CreateProviderResponse = UpsertProviderResponse;

export type CreateProviderError = unknown;

export type UpdateProviderData = {
  body: UpsertProviderRequest;
};

export type UpdateProviderResponse = UpsertProviderResponse;

export type UpdateProviderError = unknown;

export type DeleteProviderData = {
  body: DeleteProviderRequest;
};

export type DeleteProviderResponse = BaseResponse;

export type DeleteProviderError = unknown;

export type ListProviderItemsData = {
  query?: {
    /**
     * Provider category
     */
    category?: ProviderCategory;
    /**
     * Whether the provider item is enabled
     */
    enabled?: boolean;
    /**
     * Provider ID
     */
    providerId?: string;
  };
};

export type ListProviderItemsResponse2 = ListProviderItemsResponse;

export type ListProviderItemsError = unknown;

export type ListProviderItemOptionsData = {
  query: {
    /**
     * Provider category
     */
    category?: ProviderCategory;
    /**
     * Provider ID
     */
    providerId: string;
  };
};

export type ListProviderItemOptionsResponse2 = ListProviderItemOptionsResponse;

export type ListProviderItemOptionsError = unknown;

export type CreateProviderItemData = {
  body: UpsertProviderItemRequest;
};

export type CreateProviderItemResponse = UpsertProviderItemResponse;

export type CreateProviderItemError = unknown;

export type BatchCreateProviderItemsData = {
  body: BatchUpsertProviderItemsRequest;
};

export type BatchCreateProviderItemsResponse = BatchUpsertProviderItemsResponse;

export type BatchCreateProviderItemsError = unknown;

export type UpdateProviderItemData = {
  body: UpsertProviderItemRequest;
};

export type UpdateProviderItemResponse = UpsertProviderItemResponse;

export type UpdateProviderItemError = unknown;

export type BatchUpdateProviderItemsData = {
  body: BatchUpsertProviderItemsRequest;
};

export type BatchUpdateProviderItemsResponse = BatchUpsertProviderItemsResponse;

export type BatchUpdateProviderItemsError = unknown;

export type DeleteProviderItemData = {
  body: DeleteProviderItemRequest;
};

export type DeleteProviderItemResponse = BaseResponse;

export type DeleteProviderItemError = unknown;

export type ScrapeData = {
  body: ScrapeWeblinkRequest;
};

export type ScrapeResponse = ScrapeWeblinkResponse;

export type ScrapeError = unknown;

export type UploadData = {
  body: UploadRequest;
};

export type UploadResponse2 = UploadResponse;

export type UploadError = unknown;

export type ServeStaticResponse = unknown;

export type ServeStaticError = unknown;

export type ConvertData = {
  body: ConvertRequest;
};

export type ConvertResponse2 = ConvertResponse;

export type ConvertError = unknown;
